generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../src/generated/nestjs-dto"
  outputToNestJsResourceStructure = "false"
  flatResourceStructure           = "false"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  classValidation                 = "false"
  fileNamingStyle                 = "camel"
  noDependencies                  = "false"
  outputType                      = "class"
  definiteAssignmentAssertion     = "false"
  requiredResponseApiProperty     = "true"
  prettier                        = "true"
}

enum UserRole {
  USER
  EMPLOYER
  ADMIN
  MANAGER
}

enum ApplicationStatus {
  APPLIED
  VIEWED
  DECLINED
  ACCEPTED
}

enum NotificationsPreference {
  EMAIL
  SMS
  PUSH
}

model User {
  id                      Int                       @id @unique @default(autoincrement())
  firstName               String
  lastName                String?
  age                     Int?
  email                   String                    @unique
  password                String
  role                    UserRole                  @default(USER)
  avatar                  String?
  bookmarks               Int[]
  applications            Application[]             @relation("UserApplications")
  applicationId           Int[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  jobs                    Job[]                     @relation(name: "JobEmployer")
  notificationPreferences NotificationsPreference[]
  applicationsApplicant   Application[]             @relation("ApplicationsApplicant")
  company                 Company?                  @relation(fields: [companyId], references: [id])
  companyId               Int?
}

model Company {
  id             Int           @id @unique @default(autoincrement())
  address        String
  applications   Application[]
  jobs           Job[]
  description    String
  email          String
  employerId     Int
  employerName   String?
  locations      Location[]
  images         String[]
  managers       String[]
  socialNetworks String[]
  name           String
  logo           String?
  phone          String
  zip            String
  vat            String
  crn            String
  website        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  members        User[]
}

model Location {
  id                Int      @id @unique @default(autoincrement())
  images            String[]
  category          String?
  description       String
  concept           String?
  phone             String?
  socialNetworks    String[]
  email             String?
  numberOfEmployees String?
  address           String?
  zip               String
  jobs              Job[]
  employerId        Int
  city              String
  managers          String[]
  country           String
  logo              String?
  employerName      String?
  name              String
  vat               String?
  kitchenConcept    String?
  updatedAt         DateTime @updatedAt
  createdAt         DateTime @default(now())
  Company           Company? @relation(fields: [companyId], references: [id])
  companyId         Int?
}

model Application {
  id                    Int               @id @unique @default(autoincrement())
  jobId                 Int
  job                   Job               @relation("JobApplications", fields: [jobId], references: [id])
  applicant             User              @relation("UserApplications", fields: [applicantId], references: [id])
  applicantId           Int
  resume                String
  coverLetter           String
  status                ApplicationStatus @default(APPLIED)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  companyId             Int
  company               Company           @relation(fields: [companyId], references: [id])
  applicationsApplicant User[]            @relation("ApplicationsApplicant")
}

model Job {
  id            Int           @id @unique @default(autoincrement())
  employer      User          @relation(name: "JobEmployer", fields: [employerId], references: [id])
  employerId    Int
  employerName  String?
  title         String
  description   String
  requirements  String[]
  applicationId Int[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  applications  Application[] @relation("JobApplications")
  location      Location      @relation(fields: [locationId], references: [id])
  locationId    Int
  company       Company       @relation(fields: [companyId], references: [id])
  companyId     Int
}
